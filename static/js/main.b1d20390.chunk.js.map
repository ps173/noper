{"version":3,"sources":["components/Editor.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Editor","useState","editorValue","setEditorValue","useEffect","fetchState","a","get","undefined","editorState","JSON","parse","saveState","set","stringify","style","color","borderColor","width","height","resize","value","onChange","event","target","className","background","position","top","right","transition","onClick","App","backgroundColor","margin","padding","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"uOAuDeA,EApDA,WACb,MAAsCC,mBAAS,wBAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACR,IAAMC,EAAU,uCAAG,4BAAAC,EAAA,sEACSC,YAAI,SADb,YAEGC,KADdC,EADW,SAGfN,EAAeO,KAAKC,MAAMF,IAHX,2CAAH,qDAMhBJ,MACC,IAEH,IAAMO,EAAS,uCAAG,sBAAAN,EAAA,sEACVO,YAAI,QAASH,KAAKI,UAAUZ,IADlB,2CAAH,qDAQf,OACE,qCACE,0BACEa,MAAO,CACLC,MAAO,QACPC,YAAa,cACbC,MAAO,OACPC,OAAQ,OACRC,OAAQ,QAEVC,MAAOnB,EACPoB,SAfe,SAACC,GACpBpB,EAAeoB,EAAMC,OAAOH,UAgB1B,wBACEI,UAAU,YACVV,MAAO,CACLW,WAAY,QACZV,MAAO,QACPW,SAAU,WACVC,IAAK,KACLC,MAAO,KACPC,WAAY,QAEdC,QAASnB,EAVX,sBClBSoB,MAjBf,WACE,OACE,qBACEjB,MAAO,CACLkB,gBAAiB,QACjBC,OAAQ,IACRC,QAAS,kBACTnB,MAAO,QACPG,OAAQ,QACRD,MAAO,SAPX,SAUE,cAAC,EAAD,OCdAkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2DAmCN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAC1BC,QAAQC,IACN,+GAIEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAGlBO,QAAQC,IAAI,sCAERb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjEjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDGnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OACvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,GAAN,sBAEPhC,IAoDV,SAAiCO,EAAeC,GAC9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GACL,IAAMC,EAAcD,EAASD,QAAQlE,IAAI,gBAEnB,MAApBmE,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAE5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAACC,GAClCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAIpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAxEAwB,CAAwBtC,EAAOC,GAE/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,+GAKJf,EAAgBC,EAAOC,OCpB/BsC,K","file":"static/js/main.b1d20390.chunk.js","sourcesContent":["import { ChangeEvent, useEffect, useState } from \"react\";\nimport { set, get } from \"idb-keyval\";\n\nconst Editor = () => {\n  const [editorValue, setEditorValue] = useState(\"Enter Your Text Here\");\n\n  useEffect(() => {\n    const fetchState = async () => {\n      const editorState = await get(\"state\");\n      if (editorState !== undefined) {\n        setEditorValue(JSON.parse(editorState));\n      }\n    };\n    fetchState();\n  }, []);\n\n  const saveState = async () => {\n    await set(\"state\", JSON.stringify(editorValue));\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setEditorValue(event.target.value);\n  };\n\n  return (\n    <>\n      <textarea\n        style={{\n          color: \"white\",\n          borderColor: \"transparent\",\n          width: \"100%\",\n          height: \"100%\",\n          resize: \"none\",\n        }}\n        value={editorValue}\n        onChange={handleChange}\n      />\n      <button\n        className=\"btn-small\"\n        style={{\n          background: \"black\",\n          color: \"white\",\n          position: \"absolute\",\n          top: \"2%\",\n          right: \"2%\",\n          transition: \"0.3s\",\n        }}\n        onClick={saveState}\n      >\n        Save\n      </button>\n    </>\n  );\n};\n\nexport default Editor;\n","import \"papercss/dist/paper.css\";\nimport Editor from \"./components/Editor\";\nfunction App() {\n  return (\n    <div\n      style={{\n        backgroundColor: \"black\",\n        margin: \"0\",\n        padding: \"2rem 0 0 1.5rem\",\n        color: \"white\",\n        height: \"100vh\",\n        width: \"100vw\",\n      }}\n    >\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log(\"Content is cached for offline use.\");\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}