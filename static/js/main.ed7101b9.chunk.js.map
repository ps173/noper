{"version":3,"sources":["components/Editor.tsx","svgs/QuestionMark.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Editor","useState","editorValue","setEditorValue","useEffect","fetchState","a","get","undefined","editorState","JSON","parse","saveState","set","stringify","style","color","borderColor","width","height","resize","value","onChange","event","target","onKeyDown","ctrlKey","key","preventDefault","autoFocus","spellCheck","QuestionMark","xmlns","className","viewBox","fill","fillRule","d","clipRule","App","backgroundColor","margin","padding","cursor","href","position","top","right","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ed7101b9.chunk.js","sourcesContent":["import { ChangeEvent, useEffect, useState, KeyboardEvent } from \"react\";\nimport { set, get } from \"idb-keyval\";\n\nconst Editor = () => {\n  const [editorValue, setEditorValue] = useState(\"You can save with ctrl-s\");\n\n  useEffect(() => {\n    const fetchState = async () => {\n      const editorState = await get(\"state\");\n      if (editorState !== undefined) {\n        setEditorValue(JSON.parse(editorState));\n      }\n    };\n    fetchState();\n  }, []);\n\n  const saveState = async () => {\n    await set(\"state\", JSON.stringify(editorValue));\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setEditorValue(event.target.value);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.ctrlKey && event.key === \"s\") {\n      event.preventDefault();\n      saveState();\n    }\n  };\n\n  return (\n    <>\n      <textarea\n        style={{\n          color: \"white\",\n          borderColor: \"transparent\",\n          width: \"100%\",\n          height: \"100%\",\n          resize: \"none\",\n        }}\n        value={editorValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        autoFocus={true}\n        spellCheck={false}\n      />\n    </>\n  );\n};\n\nexport default Editor;\n","import { SVGProps } from \"react\";\n\nconst QuestionMark = ({ color, style }: SVGProps<{ color?: string }>) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"h-5 w-5\"\n      style={style}\n      viewBox=\"0 0 20 20\"\n      fill={color ? color : \"dodgerblue\"}\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport default QuestionMark;\n","import \"papercss/dist/paper.css\";\nimport Editor from \"./components/Editor\";\nimport QuestionMark from \"./svgs/QuestionMark\";\nfunction App() {\n  return (\n    <div\n      style={{\n        backgroundColor: \"black\",\n        margin: \"0\",\n        padding: \"2rem 0 0 1.5rem\",\n        color: \"white\",\n        height: \"100vh\",\n        width: \"100vw\",\n      }}\n    >\n      <Editor />\n\n      <a\n        style={{\n          cursor: \"pointer\",\n        }}\n        target=\"_blank\"\n        href=\"https://github.com/ps173/noper\"\n      >\n        <QuestionMark\n          style={{\n            position: \"absolute\",\n            top: \"2%\",\n            right: \"2%\",\n            width: \"2rem\",\n            height: \"2rem\",\n          }}\n        />\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log(\"Content is cached for offline use.\");\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}